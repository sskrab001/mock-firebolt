---
methods:
  closedcaptions.enabled:
    response: |
      function f(ctx, params) {
        const ccs = ctx.get('closedCaptionsSettings');
        console.log("### value of ctx inside closedcaptions.enabled of yaml",ctx)
        console.log("*** value of ccs.enabled in yaml----",ccs.enabled)
        return ccs.enabled;
      }
  closedcaptions.setEnabled:
    response: |
      function f(ctx, params) {
        const ccs = ctx.get('closedCaptionsSettings');
        ccs.enabled=params.value
        ctx.set('closedCaptionsSettings',ccs)

        //Examples for setting and deleting with a scope in mind
        //ctx.set('closedCaptionsSettings',ccs, '~A')
        //ctx.delete('closedCaptionsSettings', '~A')
        console.log("### value of ctx inside closedcaptions.setEnabled of yaml",ctx)

        const result = ctx.get('closedCaptionsSettings');
        const msg = 'Post trigger for closedCaptions.setEnabled';
        console.log("value of result inside yaml ",result)
        console.log("value of msg inside in yaml",msg)
        ctx.sendBroadcastEvent('accessibility.onClosedCaptionsSettingsChanged', result, msg);
        //ctx.sendEvent('closedcaptions.onEnabledChanged', result.enabled, msg);


        return null;
      }
  accessibility.closedCaptionsSettings:
    response: |
      function f(ctx, params) {
        // Getter called... Return our stashed value, per last setter call
        const ccs = ctx.get('closedCaptionsSettings');
        return ccs;
      }
